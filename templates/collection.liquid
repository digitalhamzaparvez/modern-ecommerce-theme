<!-- Collection Schema -->
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": "{{ collection.title | strip_html }}",
  "description": "{{ collection.description | strip_html | truncate: 160 }}",
  "url": "{{ canonical_url }}",
  "mainEntity": {
    "@type": "ItemList",
    "numberOfItems": "{{ collection.products.size }}",
    "itemListElement": [
      {% for product in collection.products limit: 12 %}
      {
        "@type": "Product",
        "position": {{ forloop.index }},
        "name": "{{ product.title | strip_html }}",
        "url": "{{ product.url | prepend: request.host }}"
      }{% unless forloop.last %},{% endunless %}
      {% endfor %}
    ]
  }
}
</script>

<main class="max-w-7xl mx-auto px-6 py-8">
  <!-- Breadcrumbs -->
  <nav class="mb-8">
  {% render 'breadcrumbs' %}
  </nav>

  <!-- Collection Hero -->
  {% section 'collection-hero' %}

  <div class="flex flex-col lg:flex-row gap-8" x-data="collectionPage()">
    <!-- Sidebar Filters (Desktop) -->
    <aside class="lg:w-64 flex-shrink-0">
      <div class="sticky top-24 space-y-6">
        <!-- Mobile Filter Toggle -->
        <button 
          @click="filtersOpen = !filtersOpen"
          class="lg:hidden w-full btn-premium-outline flex items-center justify-center"
        >
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
          </svg>
          Filters & Sort
        </button>

        <!-- Filters Panel -->
        <div 
          x-show="filtersOpen || window.innerWidth >= 1024"
          x-transition
          class="space-y-6 bg-white p-6 rounded-lg border lg:border-0 lg:bg-transparent lg:p-0"
        >
          <!-- Sort Options -->
          <div>
            <h3 class="font-semibold text-slate-800 mb-3">Sort By</h3>
            <select 
              x-model="sortBy"
              @change="applySorting()"
              class="w-full border border-slate-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-amber-500 focus:border-transparent"
            >
              <option value="manual">Featured</option>
              <option value="best-selling">Best Selling</option>
              <option value="title-ascending">A-Z</option>
              <option value="title-descending">Z-A</option>
              <option value="price-ascending">Price: Low to High</option>
              <option value="price-descending">Price: High to Low</option>
              <option value="created-ascending">Oldest First</option>
              <option value="created-descending">Newest First</option>
            </select>
          </div>

          <!-- Price Filter -->
          <div>
            <h3 class="font-semibold text-slate-800 mb-3">Price Range</h3>
            <div class="space-y-2">
              <div class="flex items-center space-x-2">
                <input 
                  x-model="priceRange.min"
                  type="number" 
                  placeholder="Min"
                  class="flex-1 border border-slate-300 rounded-lg px-3 py-2 text-sm"
                >
                <span class="text-slate-500">-</span>
                <input 
                  x-model="priceRange.max"
                  type="number" 
                  placeholder="Max"
                  class="flex-1 border border-slate-300 rounded-lg px-3 py-2 text-sm"
                >
              </div>
              <button 
                @click="applyPriceFilter()"
                class="w-full text-sm btn-premium-outline py-2"
              >
                Apply
              </button>
            </div>
          </div>

          <!-- Category Filter -->
          {% if collection.all_tags.size > 0 %}
          <div>
            <h3 class="font-semibold text-slate-800 mb-3">Categories</h3>
            <div class="space-y-2 max-h-48 overflow-y-auto">
              {% for tag in collection.all_tags %}
              <label class="flex items-center space-x-2 cursor-pointer">
                <input 
                  type="checkbox" 
                  value="{{ tag }}"
                  @change="toggleTag('{{ tag }}')"
                  class="rounded border-slate-300 text-amber-600 focus:ring-amber-500"
                >
                <span class="text-sm text-slate-700">{{ tag }}</span>
              </label>
              {% endfor %}
            </div>
          </div>
          {% endif %}

          <!-- Brand Filter -->
          {% assign vendors = collection.products | map: 'vendor' | uniq %}
          {% if vendors.size > 1 %}
          <div>
            <h3 class="font-semibold text-slate-800 mb-3">Brand</h3>
            <div class="space-y-2">
              {% for vendor in vendors %}
              <label class="flex items-center space-x-2 cursor-pointer">
                <input 
                  type="checkbox" 
                  value="{{ vendor }}"
                  @change="toggleVendor('{{ vendor }}')"
                  class="rounded border-slate-300 text-amber-600 focus:ring-amber-500"
                >
                <span class="text-sm text-slate-700">{{ vendor }}</span>
              </label>
              {% endfor %}
            </div>
          </div>
          {% endif %}

          <!-- Clear Filters -->
          <button 
            @click="clearFilters()"
            class="w-full text-sm text-slate-600 hover:text-slate-800 underline"
          >
            Clear All Filters
          </button>
        </div>
      </div>
    </aside>

    <!-- Main Content -->
    <div class="flex-1">
      <!-- Results Header -->
      <div class="flex items-center justify-between mb-6">
        <div>
          <h1 class="text-2xl font-bold text-slate-800">{{ collection.title }}</h1>
          <p class="text-slate-600 mt-1">
            <span x-text="filteredProducts.length"></span> products
          </p>
        </div>
        
        <!-- View Toggle -->
        <div class="flex items-center space-x-2 bg-slate-100 rounded-lg p-1">
          <button 
            @click="viewMode = 'grid'"
            :class="viewMode === 'grid' ? 'bg-white shadow-sm' : ''"
            class="p-2 rounded-md transition-colors"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path>
            </svg>
          </button>
          <button 
            @click="viewMode = 'list'"
            :class="viewMode === 'list' ? 'bg-white shadow-sm' : ''"
            class="p-2 rounded-md transition-colors"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
            </svg>
          </button>
        </div>
      </div>

      <!-- Active Filters -->
      <div x-show="activeFilters.length > 0" class="mb-6">
        <div class="flex flex-wrap gap-2">
          <template x-for="filter in activeFilters" :key="filter.id">
            <span class="inline-flex items-center gap-1 px-3 py-1 bg-amber-100 text-amber-800 rounded-full text-sm">
              <span x-text="filter.label"></span>
              <button @click="removeFilter(filter.id)" class="hover:text-amber-900">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </span>
          </template>
        </div>
      </div>

      <!-- Products Grid -->
      <div 
        :class="viewMode === 'grid' ? 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6' : 'space-y-4'"
        x-show="filteredProducts.length > 0"
      >
        <template x-for="product in paginatedProducts" :key="product.id">
          <div x-html="product.html"></div>
        </template>
      </div>

      <!-- No Results -->
      <div x-show="filteredProducts.length === 0" class="text-center py-12">
        <svg class="w-16 h-16 text-slate-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        <h3 class="text-xl font-semibold text-slate-800 mb-2">No products found</h3>
        <p class="text-slate-600 mb-4">Try adjusting your filters or search terms</p>
        <button @click="clearFilters()" class="btn-premium">Clear Filters</button>
      </div>

      <!-- Load More / Pagination -->
      <div x-show="hasMoreProducts" class="mt-8 text-center">
        <button 
          @click="loadMore()"
          :disabled="loading"
          class="btn-premium-outline px-8 py-3 disabled:opacity-50"
        >
          <span x-show="!loading">Load More Products</span>
          <span x-show="loading">Loading...</span>
        </button>
      </div>
    </div>
  </div>
</main>

<script>
  function collectionPage() {
    return {
      filtersOpen: false,
      viewMode: 'grid',
      sortBy: 'manual',
      priceRange: { min: '', max: '' },
      selectedTags: [],
      selectedVendors: [],
      activeFilters: [],
      allProducts: {{ collection.products | json }},
      filteredProducts: [],
      paginatedProducts: [],
      currentPage: 1,
      productsPerPage: 12,
      loading: false,
      
      init() {
        this.filteredProducts = [...this.allProducts];
        this.updatePagination();
        this.renderProducts();
      },
      
      get hasMoreProducts() {
        return this.currentPage * this.productsPerPage < this.filteredProducts.length;
      },
      
      applySorting() {
        const sortMap = {
          'manual': () => 0,
          'best-selling': (a, b) => b.sales - a.sales,
          'title-ascending': (a, b) => a.title.localeCompare(b.title),
          'title-descending': (a, b) => b.title.localeCompare(a.title),
          'price-ascending': (a, b) => a.price - b.price,
          'price-descending': (a, b) => b.price - a.price,
          'created-ascending': (a, b) => new Date(a.created_at) - new Date(b.created_at),
          'created-descending': (a, b) => new Date(b.created_at) - new Date(a.created_at)
        };
        
        this.filteredProducts.sort(sortMap[this.sortBy] || sortMap.manual);
        this.currentPage = 1;
        this.updatePagination();
      },
      
      applyFilters() {
        let filtered = [...this.allProducts];
        
        // Price filter
        if (this.priceRange.min !== '' || this.priceRange.max !== '') {
          filtered = filtered.filter(product => {
            const price = product.price_min / 100;
            const min = this.priceRange.min !== '' ? parseFloat(this.priceRange.min) : 0;
            const max = this.priceRange.max !== '' ? parseFloat(this.priceRange.max) : Infinity;
            return price >= min && price <= max;
          });
        }
        
        // Tag filter
        if (this.selectedTags.length > 0) {
          filtered = filtered.filter(product => 
            this.selectedTags.some(tag => product.tags.includes(tag))
          );
        }
        
        // Vendor filter
        if (this.selectedVendors.length > 0) {
          filtered = filtered.filter(product => 
            this.selectedVendors.includes(product.vendor)
          );
        }
        
        this.filteredProducts = filtered;
        this.currentPage = 1;
        this.updatePagination();
        this.updateActiveFilters();
      },
      
      toggleTag(tag) {
        const index = this.selectedTags.indexOf(tag);
        if (index > -1) {
          this.selectedTags.splice(index, 1);
        } else {
          this.selectedTags.push(tag);
        }
        this.applyFilters();
      },
      
      toggleVendor(vendor) {
        const index = this.selectedVendors.indexOf(vendor);
        if (index > -1) {
          this.selectedVendors.splice(index, 1);
        } else {
          this.selectedVendors.push(vendor);
        }
        this.applyFilters();
      },
      
      applyPriceFilter() {
        this.applyFilters();
      },
      
      clearFilters() {
        this.priceRange = { min: '', max: '' };
        this.selectedTags = [];
        this.selectedVendors = [];
        this.activeFilters = [];
        this.filteredProducts = [...this.allProducts];
        this.currentPage = 1;
        this.updatePagination();
        
        // Reset form elements
        document.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);
      },
      
      updateActiveFilters() {
        this.activeFilters = [];
        
        if (this.priceRange.min !== '' || this.priceRange.max !== '') {
          this.activeFilters.push({
            id: 'price',
            label: `Price: $${this.priceRange.min || '0'} - $${this.priceRange.max || '∞'}`
          });
        }
        
        this.selectedTags.forEach(tag => {
          this.activeFilters.push({ id: `tag-${tag}`, label: tag });
        });
        
        this.selectedVendors.forEach(vendor => {
          this.activeFilters.push({ id: `vendor-${vendor}`, label: vendor });
        });
      },
      
      removeFilter(filterId) {
        if (filterId === 'price') {
          this.priceRange = { min: '', max: '' };
        } else if (filterId.startsWith('tag-')) {
          const tag = filterId.replace('tag-', '');
          this.selectedTags = this.selectedTags.filter(t => t !== tag);
        } else if (filterId.startsWith('vendor-')) {
          const vendor = filterId.replace('vendor-', '');
          this.selectedVendors = this.selectedVendors.filter(v => v !== vendor);
        }
        this.applyFilters();
      },
      
      updatePagination() {
        const start = 0;
        const end = this.currentPage * this.productsPerPage;
        this.paginatedProducts = this.filteredProducts.slice(start, end);
        this.renderProducts();
      },
      
      loadMore() {
        this.loading = true;
        setTimeout(() => {
          this.currentPage++;
          this.updatePagination();
          this.loading = false;
        }, 500);
      },
      
      renderProducts() {
        // This would typically render product cards
        // For now, we'll use a placeholder
        this.paginatedProducts = this.paginatedProducts.map(product => ({
          ...product,
          html: `<div class="card-premium p-4"><h3 class="font-semibold">${product.title}</h3><p class="text-slate-600">${Shopify.formatMoney(product.price_min)}</p></div>`
        }));
      }
    };
  }
</script>

