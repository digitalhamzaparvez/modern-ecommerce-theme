<div id="cart-drawer" x-data="cartDrawer()" x-cloak class="fixed inset-y-0 right-0 w-full max-w-md bg-white shadow-2xl translate-x-full transition-transform z-50" :class="{ 'translate-x-0': open }">
  <!-- Header -->
  <div class="flex items-center justify-between p-4 border-b bg-slate-50">
    <h3 class="text-lg font-semibold text-slate-800">Your Cart</h3>
    <button @click="close" class="text-slate-500 hover:text-slate-700">
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  </div>
  
  <!-- Free shipping progress -->
  <div class="p-4 bg-green-50 border-b">
    <div class="flex items-center justify-between text-sm mb-2">
      <span class="text-green-700 font-medium">🚚 Free shipping at $50</span>
      <span class="text-green-600" x-text="'$' + (50 - (subtotalCents / 100)).toFixed(2) + ' away'"></span>
    </div>
    <div class="w-full bg-green-200 rounded-full h-2">
      <div class="bg-green-500 h-2 rounded-full transition-all" :style="'width: ' + Math.min(100, (subtotalCents / 5000) * 100) + '%'"></div>
    </div>
  </div>
  
  <!-- Cart items -->
  <div class="flex-1 overflow-y-auto p-4" x-html="itemsHtml">
    <div class="text-center py-8 text-slate-500">
      <svg class="w-12 h-12 mx-auto mb-4 text-slate-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m2.6 8L6 21h12M9 19v2m4-2v2"></path>
      </svg>
      <p>Your cart is empty</p>
    </div>
  </div>
  
  <!-- Urgency message -->
  <div class="px-4 py-2 bg-red-50 border-t border-red-100">
    <p class="text-xs text-red-600 text-center">⏰ Items in your cart are reserved for 15 minutes</p>
  </div>
  
  <!-- Footer -->
  <div class="border-t bg-white p-4 space-y-4">
    <!-- Subtotal -->
    <div class="flex items-center justify-between text-lg font-semibold">
      <span>Subtotal</span>
      <span x-text="subtotal">$0.00</span>
    </div>
    
    <!-- Discount code -->
    <div class="border rounded-lg p-3 bg-slate-50">
      <div class="flex items-center space-x-2">
        <input type="text" placeholder="Discount code" class="flex-1 bg-transparent text-sm outline-none">
        <button class="text-sm text-amber-600 font-medium">Apply</button>
      </div>
    </div>
    
    <!-- Checkout button -->
    <a href="/cart" class="btn-premium w-full text-center block text-lg py-4">
      Secure Checkout
      <svg class="w-5 h-5 ml-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
      </svg>
    </a>
    
    <!-- Trust signals -->
    <div class="flex items-center justify-center space-x-4 text-xs text-slate-500">
      <span>🔒 Secure</span>
      <span>📦 Free shipping</span>
      <span>↩️ Easy returns</span>
    </div>
  </div>
</div>

<script>
  function cartDrawer() {
    return {
      open: false,
      itemsHtml: '',
      subtotal: '$0.00',
      subtotalCents: 0,
      
      async refresh() {
        try {
          const res = await fetch('/cart?view=mini');
          this.itemsHtml = await res.text();
          const cart = await (await fetch('/cart.js')).json();
          this.subtotal = Shopify.formatMoney(cart.items_subtotal_price);
          this.subtotalCents = cart.items_subtotal_price;
        } catch (e) {
          console.error('Cart refresh failed:', e);
        }
      },
      
      async add(variantId, quantity = 1) {
        try {
          await fetch('/cart/add.js', { 
            method: 'POST', 
            headers: { 'Content-Type': 'application/json' }, 
            body: JSON.stringify({ id: variantId, quantity }) 
          });
          await this.refresh();
          this.open = true;
        } catch (e) {
          console.error('Add to cart failed:', e);
        }
      },
      
      close() { 
        this.open = false;
      }
    };
  }

  document.addEventListener('alpine:init', () => {
    const drawer = document.getElementById('cart-drawer');
    
    // Handle quick add buttons
    document.body.addEventListener('click', (e) => {
      const addBtn = e.target.closest('[data-quick-add]');
      if (addBtn && drawer && drawer.__x) {
        e.preventDefault();
        drawer.__x.$data.add(addBtn.getAttribute('data-variant-id'));
      }
    });
    
    // Handle cart toggle events
    document.addEventListener('cart:toggle', () => {
      if (drawer && drawer.__x) {
        drawer.__x.$data.open = !drawer.__x.$data.open;
      }
    });
    
    // Auto-refresh cart on page load
    if (drawer && drawer.__x) {
      drawer.__x.$data.refresh();
    }
  });
</script>
