<!-- Enhanced Quick View Modal -->
<div id="quick-view-modal" x-data="quickViewModal()" x-cloak class="modal-overlay" x-show="open" x-transition>
  <div class="flex items-center justify-center min-h-screen p-4">
    <div 
      @click.away="close()"
      class="modal-content max-w-4xl w-full"
      x-show="open"
      x-transition:enter="transition ease-out duration-300"
      x-transition:enter-start="opacity-0 scale-95"
      x-transition:enter-end="opacity-100 scale-100"
      x-transition:leave="transition ease-in duration-200"
      x-transition:leave-start="opacity-100 scale-100"
      x-transition:leave-end="opacity-0 scale-95"
    >
      <!-- Header -->
      <div class="flex items-center justify-between p-6 border-b">
        <h2 class="text-xl font-semibold text-slate-800">Quick View</h2>
        <button @click="close()" class="text-slate-500 hover:text-slate-700">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <!-- Loading State -->
      <div x-show="loading" class="p-8 text-center">
        <div class="loading-skeleton w-full h-64 mb-4"></div>
        <div class="loading-skeleton w-3/4 h-4 mb-2 mx-auto"></div>
        <div class="loading-skeleton w-1/2 h-4 mx-auto"></div>
      </div>
      
      <!-- Product Content -->
      <div x-show="!loading && product" class="p-6">
        <div class="grid md:grid-cols-2 gap-8">
          <!-- Product Images -->
          <div class="space-y-4">
            <div class="aspect-square bg-slate-100 rounded-lg overflow-hidden">
              <img 
                x-bind:src="product?.featured_image" 
                x-bind:alt="product?.title"
                class="w-full h-full object-cover"
              >
            </div>
            
            <!-- Thumbnail Gallery -->
            <div x-show="product?.images?.length > 1" class="grid grid-cols-4 gap-2">
              <template x-for="image in product?.images?.slice(0, 4)" :key="image.id">
                <button 
                  @click="selectedImage = image.src"
                  class="aspect-square bg-slate-100 rounded-lg overflow-hidden border-2 transition-colors"
                  :class="selectedImage === image.src ? 'border-amber-500' : 'border-transparent hover:border-slate-300'"
                >
                  <img 
                    x-bind:src="image.src" 
                    x-bind:alt="product?.title"
                    class="w-full h-full object-cover"
                  >
                </button>
              </template>
            </div>
          </div>
          
          <!-- Product Info -->
          <div class="space-y-6">
            <div>
              <h3 class="text-2xl font-bold text-slate-800 mb-2" x-text="product?.title"></h3>
              <div class="flex items-center space-x-2">
                <span class="text-2xl font-bold text-slate-800" x-text="formatPrice(product?.price)"></span>
                <span x-show="product?.compare_at_price > product?.price" 
                      class="text-lg text-slate-500 line-through" 
                      x-text="formatPrice(product?.compare_at_price)"></span>
              </div>
            </div>
            
            <!-- Variants -->
            <div x-show="product?.variants?.length > 1" class="space-y-4">
              <template x-for="option in product?.options" :key="option.name">
                <div>
                  <label class="block font-medium text-slate-800 mb-2" x-text="option.name"></label>
                  <div class="flex flex-wrap gap-2">
                    <template x-for="value in option.values" :key="value">
                      <button 
                        @click="selectOption(option.name, value)"
                        class="px-4 py-2 border rounded-lg font-medium transition-colors"
                        :class="selectedOptions[option.name] === value ? 'border-amber-500 bg-amber-50 text-amber-700' : 'border-slate-300 hover:border-slate-400'"
                        x-text="value"
                      ></button>
                    </template>
                  </div>
                </div>
              </template>
            </div>
            
            <!-- Description -->
            <div class="prose prose-sm max-w-none">
              <div x-html="product?.description"></div>
            </div>
            
            <!-- Actions -->
            <div class="space-y-3">
              <div class="flex items-center space-x-4">
                <label class="font-medium text-slate-800">Quantity:</label>
                <div class="flex items-center border border-slate-300 rounded-lg">
                  <button @click="quantity = Math.max(1, quantity - 1)" class="px-3 py-2 hover:bg-slate-50">-</button>
                  <input x-model="quantity" type="number" min="1" class="w-16 text-center py-2 border-0 focus:ring-0">
                  <button @click="quantity++" class="px-3 py-2 hover:bg-slate-50">+</button>
                </div>
              </div>
              
              <button 
                @click="addToCart()"
                :disabled="!selectedVariant || !selectedVariant.available"
                class="w-full btn-premium text-lg py-3 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <span x-show="selectedVariant && selectedVariant.available">Add to Cart</span>
                <span x-show="!selectedVariant || !selectedVariant.available">Out of Stock</span>
              </button>
              
              <a 
                x-bind:href="product?.url" 
                class="w-full btn-premium-outline text-center block py-3"
              >
                View Full Details
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Exit Intent Modal -->
<div id="exit-intent-modal" x-data="exitIntentModal()" x-cloak class="modal-overlay" x-show="open" x-transition>
  <div class="flex items-center justify-center min-h-screen p-4">
    <div 
      @click.away="close()"
      class="modal-content max-w-md"
      x-show="open"
      x-transition:enter="transition ease-out duration-300"
      x-transition:enter-start="opacity-0 scale-95"
      x-transition:enter-end="opacity-100 scale-100"
      x-transition:leave="transition ease-in duration-200"
      x-transition:leave-start="opacity-100 scale-100"
      x-transition:leave-end="opacity-0 scale-95"
    >
      <!-- Header -->
      <div class="text-center p-6 bg-gradient-to-br from-amber-500 to-amber-600 text-white rounded-t-xl">
        <div class="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v13m0-13V6a2 2 0 112 2h-2zm0 0V5.5A2.5 2.5 0 109.5 8H12zm-7 4h14M5 12a2 2 0 110-4h14a2 2 0 110 4M5 12v7a2 2 0 002 2h10a2 2 0 002-2v-7"></path>
          </svg>
        </div>
        <h2 class="text-2xl font-bold mb-2">Wait! Don't Leave Yet!</h2>
        <p class="text-amber-100">Get 10% off your first order</p>
      </div>
      
      <!-- Content -->
      <div class="p-6">
        <div class="text-center mb-6">
          <p class="text-slate-600 mb-4">
            Join thousands of happy customers and save on premium products.
          </p>
          <div class="bg-amber-100 text-amber-800 px-4 py-2 rounded-lg font-bold text-xl mb-4">
            Code: WELCOME10
          </div>
        </div>
        
        <!-- Email Signup -->
        <form @submit.prevent="subscribe()" class="space-y-4">
          <input 
            x-model="email"
            type="email" 
            placeholder="Enter your email address"
            required
            class="w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent"
          >
          <button 
            type="submit"
            :disabled="loading"
            class="w-full btn-premium py-3 disabled:opacity-50"
          >
            <span x-show="!loading">Get My 10% Discount</span>
            <span x-show="loading">Processing...</span>
          </button>
        </form>
        
        <div class="text-center mt-4">
          <button @click="close()" class="text-sm text-slate-500 hover:text-slate-700">
            No thanks, I'll pay full price
          </button>
        </div>
        
        <!-- Trust Signals -->
        <div class="flex items-center justify-center space-x-4 mt-6 pt-4 border-t text-xs text-slate-500">
          <span>üîí Secure</span>
          <span>üìß No Spam</span>
          <span>üéÅ Exclusive Offers</span>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  function quickViewModal() {
    return {
      open: false,
      loading: false,
      product: null,
      selectedImage: null,
      selectedOptions: {},
      selectedVariant: null,
      quantity: 1,
      
      async show(productId) {
        this.open = true;
        this.loading = true;
        
        try {
          const response = await fetch(`/products/${productId}.js`);
          this.product = await response.json();
          this.selectedImage = this.product.featured_image;
          this.selectedVariant = this.product.variants[0];
          
          // Initialize options
          if (this.product.options) {
            this.product.options.forEach((option, index) => {
              this.selectedOptions[option.name] = this.selectedVariant.options[index];
            });
          }
        } catch (error) {
          console.error('Failed to load product:', error);
        } finally {
          this.loading = false;
        }
      },
      
      close() {
        this.open = false;
        this.product = null;
        this.selectedOptions = {};
        this.quantity = 1;
      },
      
      selectOption(optionName, value) {
        this.selectedOptions[optionName] = value;
        
        // Find matching variant
        this.selectedVariant = this.product.variants.find(variant => {
          return Object.keys(this.selectedOptions).every((key, index) => {
            return variant.options[index] === this.selectedOptions[key];
          });
        });
      },
      
      formatPrice(price) {
        return Shopify.formatMoney(price);
      },
      
      async addToCart() {
        if (!this.selectedVariant) return;
        
        try {
          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              id: this.selectedVariant.id,
              quantity: this.quantity
            })
          });
          
          if (response.ok) {
            Alpine.store('cart').refresh();
            document.dispatchEvent(new CustomEvent('cart:toggle'));
            this.close();
          }
        } catch (error) {
          console.error('Add to cart failed:', error);
        }
      }
    };
  }
  
  function exitIntentModal() {
    return {
      open: false,
      loading: false,
      email: '',
      
      show() {
        // Check if already shown in this session
        if (sessionStorage.getItem('exitIntentShown')) return;
        
        this.open = true;
        sessionStorage.setItem('exitIntentShown', 'true');
      },
      
      close() {
        this.open = false;
      },
      
      async subscribe() {
        this.loading = true;
        
        try {
          // Simulate newsletter signup
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // Show success and close
          alert('Welcome! Check your email for your 10% discount code.');
          this.close();
        } catch (error) {
          console.error('Subscription failed:', error);
        } finally {
          this.loading = false;
        }
      }
    };
  }
  
  // Event listeners
  document.addEventListener('alpine:init', () => {
    // Quick view functionality
    document.body.addEventListener('click', (e) => {
      const quickViewBtn = e.target.closest('[data-quick-view]');
      if (quickViewBtn) {
        e.preventDefault();
        const productId = quickViewBtn.getAttribute('data-quick-view');
        const modal = document.getElementById('quick-view-modal');
        if (modal && modal.__x) {
          modal.__x.$data.show(productId);
        }
      }
    });
    
    // Exit intent functionality
    document.addEventListener('show:exit-intent', () => {
      const modal = document.getElementById('exit-intent-modal');
      if (modal && modal.__x) {
        modal.__x.$data.show();
      }
    });
  });
</script>